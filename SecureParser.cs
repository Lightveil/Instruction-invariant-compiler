// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-RJJ24Q0
// DateTime: 4/14/2017 8:12:25 PM
// UserName: Samuel Ranellucci
// Input file <secureParser.y - 4/14/2017 7:40:48 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Collections;
using System.IO;
using Compiler;

namespace Parsing
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,BYTE_LITERAL=6,
    BOP=7,Fixed=8,Loop=9,Return=10,Secure=11,New=12,
    Int=13,Byte=14,Bool=15,Void=16,LP=17,RP=18,
    LCB=19,RCB=20,LSB=21,RSB=22,Comma=23,SemiColon=24,
    Equal=25,True=26,False=27};

public struct ValueType
#line 18 "secureParser.y"
{
    public string              tstr;
    public int                 tint;
	public byte                tbyte;
	public ITreeNode 		   tnode;
	public bool tbool;

	public TypeNode           itype;
	public VariableTypeNode   vtype;
	public SimpleTypeNode	  ttype; 

	public Expression 		  texpr;
	public Assign			  tassign;
	public FuncNode			  tfunc;
	public PrimitiveTypeNode  prim;
	
	public List<ITreeNode>		   litn;
	public List<Expression>		   lexpr;
	public MethodNode			   mnode;
	public List<DeclarationNode>   ldecl;
	public List<MethodNode>		   lmnode;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from secureParser.y - 4/14/2017 7:40:48 PM
#line 10 "secureParser.y"
	public List<MethodNode> Result
	{
		private set;
		get;
	}
#line default
  // End verbatim content from secureParser.y - 4/14/2017 7:40:48 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[46];
  private static State[] states = new State[103];
  private static string[] nonTerms = new string[] {
      "Identifier", "Tree", "Func", "Boolean", "Types", "MethodTypes", "VType", 
      "SType", "Num", "Expr", "Assignement", "Arguments", "Body", "Method", "Input", 
      "Methods", "Beginning", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{11,5},new int[]{-17,1,-16,3,-14,102});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{11,5,3,-45},new int[]{-14,4});
    states[4] = new State(-44);
    states[5] = new State(new int[]{16,100,8,47,15,49,13,51,14,52},new int[]{-6,6,-5,101,-7,70,-8,53,-9,50});
    states[6] = new State(new int[]{4,38},new int[]{-1,7});
    states[7] = new State(new int[]{17,8});
    states[8] = new State(new int[]{18,94,8,47,15,49,13,51,14,52},new int[]{-15,9,-5,98,-7,70,-8,53,-9,50});
    states[9] = new State(new int[]{18,10,23,91});
    states[10] = new State(new int[]{19,11});
    states[11] = new State(new int[]{4,38,8,47,15,49,13,51,14,52,9,75,10,87},new int[]{-13,12,-10,90,-11,15,-1,16,-5,64,-7,70,-8,53,-9,50,-3,73});
    states[12] = new State(new int[]{20,13,4,38,8,47,15,49,13,51,14,52,9,75,10,87},new int[]{-10,14,-11,15,-1,16,-5,64,-7,70,-8,53,-9,50,-3,73});
    states[13] = new State(-37);
    states[14] = new State(-36);
    states[15] = new State(-30);
    states[16] = new State(new int[]{21,17,25,61,17,54});
    states[17] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,18,-4,31,-1,34,-3,41});
    states[18] = new State(new int[]{22,19,7,23});
    states[19] = new State(new int[]{25,20});
    states[20] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,21,-4,31,-1,34,-3,41});
    states[21] = new State(new int[]{24,22,7,23});
    states[22] = new State(-27);
    states[23] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,24,-4,31,-1,34,-3,41});
    states[24] = new State(-4);
    states[25] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42,13,51,14,52},new int[]{-2,26,-9,28,-4,31,-1,34,-3,41});
    states[26] = new State(new int[]{18,27,7,23});
    states[27] = new State(-3);
    states[28] = new State(new int[]{18,29});
    states[29] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,30,-4,31,-1,34,-3,41});
    states[30] = new State(new int[]{7,23,22,-12,24,-12,18,-12,23,-12});
    states[31] = new State(-5);
    states[32] = new State(-15);
    states[33] = new State(-16);
    states[34] = new State(new int[]{21,35,17,54,22,-6,7,-6,24,-6,18,-6,23,-6});
    states[35] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,36,-4,31,-1,34,-3,41});
    states[36] = new State(new int[]{22,37,7,23});
    states[37] = new State(-9);
    states[38] = new State(-2);
    states[39] = new State(-7);
    states[40] = new State(-8);
    states[41] = new State(-10);
    states[42] = new State(new int[]{8,47,15,49,13,51,14,52},new int[]{-7,43,-8,53,-9,50});
    states[43] = new State(new int[]{21,44});
    states[44] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,45,-4,31,-1,34,-3,41});
    states[45] = new State(new int[]{22,46,7,23});
    states[46] = new State(-11);
    states[47] = new State(new int[]{15,49,13,51,14,52},new int[]{-8,48,-9,50});
    states[48] = new State(-21);
    states[49] = new State(-23);
    states[50] = new State(-24);
    states[51] = new State(-25);
    states[52] = new State(-26);
    states[53] = new State(-22);
    states[54] = new State(new int[]{18,59,17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-12,55,-2,60,-4,31,-1,34,-3,41});
    states[55] = new State(new int[]{18,56,23,57});
    states[56] = new State(-13);
    states[57] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,58,-4,31,-1,34,-3,41});
    states[58] = new State(new int[]{7,23,18,-18,23,-18});
    states[59] = new State(-14);
    states[60] = new State(new int[]{7,23,18,-17,23,-17});
    states[61] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,62,-4,31,-1,34,-3,41});
    states[62] = new State(new int[]{24,63,7,23});
    states[63] = new State(-29);
    states[64] = new State(new int[]{4,38},new int[]{-1,65});
    states[65] = new State(new int[]{25,66,24,69});
    states[66] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,67,-4,31,-1,34,-3,41});
    states[67] = new State(new int[]{24,68,7,23});
    states[68] = new State(-28);
    states[69] = new State(-31);
    states[70] = new State(new int[]{21,71,4,-20});
    states[71] = new State(new int[]{22,72});
    states[72] = new State(-19);
    states[73] = new State(new int[]{24,74});
    states[74] = new State(-32);
    states[75] = new State(new int[]{17,76});
    states[76] = new State(new int[]{13,51,14,52},new int[]{-9,77});
    states[77] = new State(new int[]{4,38},new int[]{-1,78});
    states[78] = new State(new int[]{25,79});
    states[79] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,80,-4,31,-1,34,-3,41});
    states[80] = new State(new int[]{23,81,7,23});
    states[81] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,82,-4,31,-1,34,-3,41});
    states[82] = new State(new int[]{18,83,7,23});
    states[83] = new State(new int[]{19,84});
    states[84] = new State(new int[]{4,38,8,47,15,49,13,51,14,52,9,75,10,87},new int[]{-13,85,-10,90,-11,15,-1,16,-5,64,-7,70,-8,53,-9,50,-3,73});
    states[85] = new State(new int[]{20,86,4,38,8,47,15,49,13,51,14,52,9,75,10,87},new int[]{-10,14,-11,15,-1,16,-5,64,-7,70,-8,53,-9,50,-3,73});
    states[86] = new State(-33);
    states[87] = new State(new int[]{17,25,26,32,27,33,4,38,5,39,6,40,12,42},new int[]{-2,88,-4,31,-1,34,-3,41});
    states[88] = new State(new int[]{24,89,7,23});
    states[89] = new State(-34);
    states[90] = new State(-35);
    states[91] = new State(new int[]{8,47,15,49,13,51,14,52},new int[]{-5,92,-7,70,-8,53,-9,50});
    states[92] = new State(new int[]{4,38},new int[]{-1,93});
    states[93] = new State(-42);
    states[94] = new State(new int[]{19,95});
    states[95] = new State(new int[]{4,38,8,47,15,49,13,51,14,52,9,75,10,87},new int[]{-13,96,-10,90,-11,15,-1,16,-5,64,-7,70,-8,53,-9,50,-3,73});
    states[96] = new State(new int[]{20,97,4,38,8,47,15,49,13,51,14,52,9,75,10,87},new int[]{-10,14,-11,15,-1,16,-5,64,-7,70,-8,53,-9,50,-3,73});
    states[97] = new State(-38);
    states[98] = new State(new int[]{4,38},new int[]{-1,99});
    states[99] = new State(-41);
    states[100] = new State(-39);
    states[101] = new State(-40);
    states[102] = new State(-43);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-18, new int[]{-17,3});
    rules[2] = new Rule(-1, new int[]{4});
    rules[3] = new Rule(-2, new int[]{17,-2,18});
    rules[4] = new Rule(-2, new int[]{-2,7,-2});
    rules[5] = new Rule(-2, new int[]{-4});
    rules[6] = new Rule(-2, new int[]{-1});
    rules[7] = new Rule(-2, new int[]{5});
    rules[8] = new Rule(-2, new int[]{6});
    rules[9] = new Rule(-2, new int[]{-1,21,-2,22});
    rules[10] = new Rule(-2, new int[]{-3});
    rules[11] = new Rule(-2, new int[]{12,-7,21,-2,22});
    rules[12] = new Rule(-2, new int[]{17,-9,18,-2});
    rules[13] = new Rule(-3, new int[]{-1,17,-12,18});
    rules[14] = new Rule(-3, new int[]{-1,17,18});
    rules[15] = new Rule(-4, new int[]{26});
    rules[16] = new Rule(-4, new int[]{27});
    rules[17] = new Rule(-12, new int[]{-2});
    rules[18] = new Rule(-12, new int[]{-12,23,-2});
    rules[19] = new Rule(-5, new int[]{-7,21,22});
    rules[20] = new Rule(-5, new int[]{-7});
    rules[21] = new Rule(-7, new int[]{8,-8});
    rules[22] = new Rule(-7, new int[]{-8});
    rules[23] = new Rule(-8, new int[]{15});
    rules[24] = new Rule(-8, new int[]{-9});
    rules[25] = new Rule(-9, new int[]{13});
    rules[26] = new Rule(-9, new int[]{14});
    rules[27] = new Rule(-11, new int[]{-1,21,-2,22,25,-2,24});
    rules[28] = new Rule(-11, new int[]{-5,-1,25,-2,24});
    rules[29] = new Rule(-11, new int[]{-1,25,-2,24});
    rules[30] = new Rule(-10, new int[]{-11});
    rules[31] = new Rule(-10, new int[]{-5,-1,24});
    rules[32] = new Rule(-10, new int[]{-3,24});
    rules[33] = new Rule(-10, new int[]{9,17,-9,-1,25,-2,23,-2,18,19,-13,20});
    rules[34] = new Rule(-10, new int[]{10,-2,24});
    rules[35] = new Rule(-13, new int[]{-10});
    rules[36] = new Rule(-13, new int[]{-13,-10});
    rules[37] = new Rule(-14, new int[]{11,-6,-1,17,-15,18,19,-13,20});
    rules[38] = new Rule(-14, new int[]{11,-6,-1,17,18,19,-13,20});
    rules[39] = new Rule(-6, new int[]{16});
    rules[40] = new Rule(-6, new int[]{-5});
    rules[41] = new Rule(-15, new int[]{-5,-1});
    rules[42] = new Rule(-15, new int[]{-15,23,-5,-1});
    rules[43] = new Rule(-16, new int[]{-14});
    rules[44] = new Rule(-16, new int[]{-16,-14});
    rules[45] = new Rule(-17, new int[]{-16});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Identifier -> IDENTIFIER
#line 91 "secureParser.y"
                         { CurrentSemanticValue.tstr = ValueStack[ValueStack.Depth-1].tstr; }
#line default
        break;
      case 3: // Tree -> LP, Tree, RP
#line 94 "secureParser.y"
                                  { CurrentSemanticValue.tnode = ValueStack[ValueStack.Depth-2].tnode; }
#line default
        break;
      case 4: // Tree -> Tree, BOP, Tree
#line 95 "secureParser.y"
                               { CurrentSemanticValue.tnode = new BinaryOperationNode(ValueStack[ValueStack.Depth-2].tstr,ValueStack[ValueStack.Depth-3].tnode,ValueStack[ValueStack.Depth-1].tnode) ;}
#line default
        break;
      case 5: // Tree -> Boolean
#line 96 "secureParser.y"
                                       { CurrentSemanticValue.tnode = new BoolNode(ValueStack[ValueStack.Depth-1].tbool);		 }
#line default
        break;
      case 6: // Tree -> Identifier
#line 97 "secureParser.y"
                            { CurrentSemanticValue.tnode = new VariableNode(ValueStack[ValueStack.Depth-1].tstr);	 }
#line default
        break;
      case 7: // Tree -> INTEGER_LITERAL
#line 98 "secureParser.y"
                            { CurrentSemanticValue.tnode = new IntegerNode(ValueStack[ValueStack.Depth-1].tint);	 }
#line default
        break;
      case 8: // Tree -> BYTE_LITERAL
#line 99 "secureParser.y"
                             { CurrentSemanticValue.tnode = new ByteNode(ValueStack[ValueStack.Depth-1].tbyte);  	 }
#line default
        break;
      case 9: // Tree -> Identifier, LSB, Tree, RSB
#line 100 "secureParser.y"
                                 { CurrentSemanticValue.tnode = new ArrayNode(ValueStack[ValueStack.Depth-4].tstr,ValueStack[ValueStack.Depth-2].tnode);	 }
#line default
        break;
      case 10: // Tree -> Func
#line 101 "secureParser.y"
                  { CurrentSemanticValue.tnode = ValueStack[ValueStack.Depth-1].tfunc ;}
#line default
        break;
      case 11: // Tree -> New, VType, LSB, Tree, RSB
#line 102 "secureParser.y"
                                       { CurrentSemanticValue.tnode = new ArrayCreationNode((VariableTypeNode)ValueStack[ValueStack.Depth-4].vtype,ValueStack[ValueStack.Depth-2].tnode); }
#line default
        break;
      case 12: // Tree -> LP, Num, RP, Tree
#line 103 "secureParser.y"
                                       { CurrentSemanticValue.tnode = new CastNode((PrimitiveTypeNode)ValueStack[ValueStack.Depth-3].prim,ValueStack[ValueStack.Depth-1].tnode);}
#line default
        break;
      case 13: // Func -> Identifier, LP, Arguments, RP
#line 106 "secureParser.y"
                                  {CurrentSemanticValue.tfunc = new FuncNode(ValueStack[ValueStack.Depth-4].tstr,ValueStack[ValueStack.Depth-2].litn);}
#line default
        break;
      case 14: // Func -> Identifier, LP, RP
#line 107 "secureParser.y"
                     {CurrentSemanticValue.tfunc = new FuncNode(ValueStack[ValueStack.Depth-3].tstr,new List<ITreeNode>());}
#line default
        break;
      case 15: // Boolean -> True
#line 110 "secureParser.y"
                {CurrentSemanticValue.tbool = true;}
#line default
        break;
      case 16: // Boolean -> False
#line 111 "secureParser.y"
                {CurrentSemanticValue.tbool = false;}
#line default
        break;
      case 17: // Arguments -> Tree
#line 116 "secureParser.y"
                 {List<ITreeNode> l = new List<ITreeNode>(); l.Add(ValueStack[ValueStack.Depth-1].tnode); CurrentSemanticValue.litn = l;}
#line default
        break;
      case 18: // Arguments -> Arguments, Comma, Tree
#line 117 "secureParser.y"
                                 {List<ITreeNode> l = ValueStack[ValueStack.Depth-3].litn; l.Add(ValueStack[ValueStack.Depth-1].tnode); CurrentSemanticValue.litn = l;}
#line default
        break;
      case 19: // Types -> VType, LSB, RSB
#line 120 "secureParser.y"
                        { CurrentSemanticValue.itype   = new ArrayTypeNode(ValueStack[ValueStack.Depth-3].vtype);}
#line default
        break;
      case 20: // Types -> VType
#line 121 "secureParser.y"
                { CurrentSemanticValue.itype = ValueStack[ValueStack.Depth-1].vtype;}
#line default
        break;
      case 21: // VType -> Fixed, SType
#line 124 "secureParser.y"
                      {CurrentSemanticValue.vtype = new FixedTypeNode(ValueStack[ValueStack.Depth-1].ttype);}
#line default
        break;
      case 22: // VType -> SType
#line 125 "secureParser.y"
                      {CurrentSemanticValue.vtype = ValueStack[ValueStack.Depth-1].ttype;}
#line default
        break;
      case 23: // SType -> Bool
#line 128 "secureParser.y"
                    {CurrentSemanticValue.ttype = new PrimitiveTypeNode("bool");}
#line default
        break;
      case 24: // SType -> Num
#line 129 "secureParser.y"
                    {CurrentSemanticValue.ttype = ValueStack[ValueStack.Depth-1].prim;}
#line default
        break;
      case 25: // Num -> Int
#line 132 "secureParser.y"
                   { CurrentSemanticValue.prim    = new PrimitiveTypeNode("int"); }
#line default
        break;
      case 26: // Num -> Byte
#line 133 "secureParser.y"
                   { CurrentSemanticValue.prim    = new PrimitiveTypeNode("byte"); }
#line default
        break;
      case 27: // Assignement -> Identifier, LSB, Tree, RSB, Equal, Tree, SemiColon
#line 138 "secureParser.y"
                                                              {CurrentSemanticValue.tassign = new ArrayAssign(ValueStack[ValueStack.Depth-7].tstr,ValueStack[ValueStack.Depth-5].tnode,ValueStack[ValueStack.Depth-2].tnode);}
#line default
        break;
      case 28: // Assignement -> Types, Identifier, Equal, Tree, SemiColon
#line 139 "secureParser.y"
                                                     {CurrentSemanticValue.tassign = new Initialization(ValueStack[ValueStack.Depth-5].itype,ValueStack[ValueStack.Depth-4].tstr,ValueStack[ValueStack.Depth-2].tnode);}
#line default
        break;
      case 29: // Assignement -> Identifier, Equal, Tree, SemiColon
#line 140 "secureParser.y"
                                                              {CurrentSemanticValue.tassign = new SimpleAssignement(ValueStack[ValueStack.Depth-4].tstr,ValueStack[ValueStack.Depth-2].tnode);}
#line default
        break;
      case 30: // Expr -> Assignement
#line 143 "secureParser.y"
                          {CurrentSemanticValue.texpr = ValueStack[ValueStack.Depth-1].tassign;}
#line default
        break;
      case 31: // Expr -> Types, Identifier, SemiColon
#line 144 "secureParser.y"
                                {CurrentSemanticValue.texpr = new DeclarationNode(ValueStack[ValueStack.Depth-3].itype,ValueStack[ValueStack.Depth-2].tstr);}
#line default
        break;
      case 32: // Expr -> Func, SemiColon
#line 145 "secureParser.y"
                             {CurrentSemanticValue.texpr = ValueStack[ValueStack.Depth-2].tfunc;}
#line default
        break;
      case 33: // Expr -> Loop, LP, Num, Identifier, Equal, Tree, Comma, Tree, RP, LCB, Body, RCB
#line 147 "secureParser.y"
                     {CurrentSemanticValue.texpr = new LoopNode(ValueStack[ValueStack.Depth-10].prim,ValueStack[ValueStack.Depth-9].tstr,ValueStack[ValueStack.Depth-7].tnode,ValueStack[ValueStack.Depth-5].tnode,ValueStack[ValueStack.Depth-2].lexpr);}
#line default
        break;
      case 34: // Expr -> Return, Tree, SemiColon
#line 148 "secureParser.y"
                           {CurrentSemanticValue.texpr = new ReturnExpression(ValueStack[ValueStack.Depth-2].tnode);}
#line default
        break;
      case 35: // Body -> Expr
#line 151 "secureParser.y"
                    {List<Expression> l = new List<Expression>(); l.Add(ValueStack[ValueStack.Depth-1].texpr); CurrentSemanticValue.lexpr = l;}
#line default
        break;
      case 36: // Body -> Body, Expr
#line 152 "secureParser.y"
                         {List<Expression> l = ValueStack[ValueStack.Depth-2].lexpr; l.Add(ValueStack[ValueStack.Depth-1].texpr); CurrentSemanticValue.lexpr = l;}
#line default
        break;
      case 37: // Method -> Secure, MethodTypes, Identifier, LP, Input, RP, LCB, Body, RCB
#line 155 "secureParser.y"
                                                                       {CurrentSemanticValue.mnode = new MethodNode(ValueStack[ValueStack.Depth-8].itype,ValueStack[ValueStack.Depth-7].tstr,ValueStack[ValueStack.Depth-5].ldecl,ValueStack[ValueStack.Depth-2].lexpr);}
#line default
        break;
      case 38: // Method -> Secure, MethodTypes, Identifier, LP, RP, LCB, Body, RCB
#line 157 "secureParser.y"
     {CurrentSemanticValue.mnode = new MethodNode(ValueStack[ValueStack.Depth-7].itype,ValueStack[ValueStack.Depth-6].tstr,new List<DeclarationNode>(),ValueStack[ValueStack.Depth-2].lexpr);}
#line default
        break;
      case 39: // MethodTypes -> Void
#line 160 "secureParser.y"
                   {CurrentSemanticValue.itype = new VoidNode();}
#line default
        break;
      case 40: // MethodTypes -> Types
#line 161 "secureParser.y"
                    {CurrentSemanticValue.itype = ValueStack[ValueStack.Depth-1].itype;}
#line default
        break;
      case 41: // Input -> Types, Identifier
#line 164 "secureParser.y"
                               {List<DeclarationNode> l = new List<DeclarationNode>(); l.Add(new DeclarationNode(ValueStack[ValueStack.Depth-2].itype,ValueStack[ValueStack.Depth-1].tstr)); CurrentSemanticValue.ldecl = l; }
#line default
        break;
      case 42: // Input -> Input, Comma, Types, Identifier
#line 165 "secureParser.y"
                                           {List<DeclarationNode> l = ValueStack[ValueStack.Depth-4].ldecl; l.Add(new DeclarationNode(ValueStack[ValueStack.Depth-2].itype,ValueStack[ValueStack.Depth-1].tstr)); CurrentSemanticValue.ldecl = l;   }
#line default
        break;
      case 43: // Methods -> Method
#line 168 "secureParser.y"
                     {List<MethodNode> l = new List<MethodNode>(); l.Add(ValueStack[ValueStack.Depth-1].mnode); CurrentSemanticValue.lmnode = l; }
#line default
        break;
      case 44: // Methods -> Methods, Method
#line 169 "secureParser.y"
                             {List<MethodNode> l = ValueStack[ValueStack.Depth-2].lmnode; l.Add(ValueStack[ValueStack.Depth-1].mnode); CurrentSemanticValue.lmnode = l;}
#line default
        break;
      case 45: // Beginning -> Methods
#line 173 "secureParser.y"
                      {Result = ValueStack[ValueStack.Depth-1].lmnode;}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 176 "secureParser.y"

private Parser(ScanBase scanner) : base(scanner) { }

static public Parser CreateParser(Stream source)
{
	return  new Parser(new Scanner(source));
}
#line default
}
}
